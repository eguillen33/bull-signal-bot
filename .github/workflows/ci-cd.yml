name: Bull Signal Bot CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install flake8

      - name: Run Flake8 (Code Smell & Style Check)
        run: flake8 .

  security:
    name: Security & Dependency Scanning
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
        
      - name: Install security tools
        run: pip install bandit pip-audit
      
      - name: Run Bandit (Python Security Scan)
        run: bandit -r .

      - name: Run pip-audit (Dependency Vulnerability Check)
        run: pip-audit
        
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Scan for secrets with GitGuardian
        uses: GitGuardian/ggshield-action@v1
        env:
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [security, secret-scan]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest

      - name: Run tests
        env:
          FMP_API_KEY: ${{ secrets.FMP_API_KEY }}
          EMAILS: 'test1@example.com,test2@example.com'
          EMAIL_PASSWORD: 'dummy-password'
          EMAIL_SENDER: 'sender@example.com'
          PYTHONPATH: ${{ github.workspace }}
        run: pytest tests/

  build:
    name: Build & Scan
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Show pwd contents (debug)
        run: ls -la

      - name: Build & Scan Docker Image
        run: docker build -t bull-signal-bot:latest .

      - name: Scan Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "bull-signal-bot:latest"
          format: "table"
          severity: "CRITICAL,HIGH"

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.DEFAULT_REGION }}

      - name: Setup kubectl
        uses: azure/setup-helm@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --region ${{ vars.DEFAULT_REGION }} \
            --name ${{ vars.EKS_CLUSTER_NAME }}

      - name: Deploy Application
        run: echo "Deploying application..."

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/bull-signal-bot:latest .

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/bull-signal-bot:latest

      - name: Deploy with Helm
        run: |
          helm upgrade --install bull-signal-bot ./helm \
            --namespace bull-signal-bot \
            --create-namespace \
            --set image.repository=${{ secrets.DOCKERHUB_USERNAME }}/bull-signal-bot \
            --set image.tag=latest
